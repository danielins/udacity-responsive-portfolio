TODO:
  ✔ Redimensionar a imagem banner usando <picture> @done (16-11-27 13:16)
  ✔ Procurar placeholders para as thumbnails @done (16-11-27 14:36)
  ✔ Criar uma logo @done (16-11-27 14:36)
  ✔ Adicionar nome no topo @done (16-11-27 13:16)
  ✔ No mobile, texto do banner deve ser display:block, abaixo da imagem @done (16-11-27 13:16)
  ✔ Fazer todos os testes da Udacity, abaixo listados. @done (16-11-27 14:36)
  ☐ Escrever README.md @op
  ☐ Escrever textos para os itens @op


UDACITY:

ELEMENTOS OBRIGATÓRIOS:
  ✔ No mínimo 4 imagens @done (16-11-22 14:36)
  ✔ Texto de título (h1, h2, etc) @done (16-11-22 14:36)
  ✔ Texto regular (parágrafo) @done (16-11-22 14:36)
  ✔ Uma logo @done (16-11-22 14:36)

HTML SEMÂNTICO:
  ✔ Tags semânticas de HTML5 como <header>, <footer> @done (16-11-22 14:36)
  ✔ Nenhuma tag <div> ou <section> sem classe ou id @done (16-11-27 13:17)

DESIGN CUSTOMIZADO:
  ✔ Customizar imagens e texto @done (16-11-27 13:35)
  ✔ Customizar posicionamento de elementos na página (grid layout) @done (16-11-23 11:44)
  ✔ Customizar CSS aplicados pelo menos em parágrafos e titulos @done (16-11-27 13:35)

GRID LAYOUT:
  ✔ A página utiliza grid que fazem uso de flexbox ou framework como Boostrap @done (16-11-23 11:44)
    ✔ Se estiver usando Bootstrap, as linhas e colunas devem estar contidas em um .container @done (16-11-23 11:44)

COMPATIBILIDADE ENTRE DISPOSITIVOS:
  ✔ Todo conteúdo é responsivo e visivel em todos tamanhos de tela @done (16-11-27 13:35)
    ✔ Desktop @done (16-11-27 13:35)
    ✔ Google Nexus 5 @done (16-11-27 13:35)
    ✔ Apple iPad @done (16-11-27 13:35)

FORNEÇA TODO CONTEÚDO:
  ✔ Todo conteúdo é renderizado em todos os disponíveis @done (16-11-27 13:35)
  ✔ Nenhum conteúdo é ocultado @done (16-11-27 13:35)

TAG META VIEWPORT:
  ✔ <meta name="viewport"> na head @done (16-11-22 14:47)

IMAGENS RESPONSIVAS:
  ✔ Media queries para garantir a responsividade @done (16-11-27 13:35)
    ✔ Se estiver usando framework, usar classes fornecidas @done (16-11-27 13:35)

SEPARAÇÃO DE CONCEITOS:
  ✔ Separar estrutura HTML de estilo CSS @done (16-11-27 13:36)
    ✔ Não há atributos style @done (16-11-27 13:36)
    ✔ Não há tag style @done (16-11-27 13:36)
  ✔ Arquivos são organizados em diretórios @done (16-11-22 14:46)
    ✔ Pasta css/ @done (16-11-22 14:46)
    ✔ Pasta img/ @done (16-11-22 14:46)
    ✔ Pasta js/ @done (16-11-22 14:46)

QUALIDADE DE CÓDIGO:

  FORMATAÇÃO HTML:
    ✔ Todo código (nomes de elementos HTML, atributos, valores de atributos) está em minusculo @done (16-11-27 13:36)
      ✔ Exceto text/CDATA @done (16-11-27 13:36)
    ✔ Não há espaços em branco ao final (ã direita) de cada linha do código (trailing whitespace) @done (16-11-27 13:41)
    ✔ Indentação consistente (usando sempre a mesma medida) @done (16-11-27 13:41)
    ✔ Código usa linha nova para cada bloco, lista ou elemento de tabela e identa cada element filho @done (16-11-27 13:41)
    ✔ Usar aspas duplas nos atributos HTML @op @done (16-11-27 13:42)

  ESTILO HTML:
    ✔ Doctype correto para HTML5 @done (16-11-27 13:42)
    ✔ Código passa na validação HTML e CSS @done (16-11-27 13:46)
    ☐ Código não usa referências de entidade @op
    ☐ Código omite atributos type para folha de estilos e scripts @op

  FORMATAÇÃO CSS:
    ✔ Não há espaços em branco ao final (ã direita) de cada linha do código (trailing whitespace) @done (16-11-27 13:50)
    ✔ Indentação consistente (usando sempre a mesma medida) @done (16-11-27 13:50)
    ✔ Código identa todo conteúdo de um bloco, que são regras dentro de regras, assim como declarações que refletem hierarquia e melhora entendimento @done (16-11-27 13:50)
    ✔ Código usa ponto e vírgula depois de toda declaração por razões de consistência e extensibilidade @done (16-11-27 13:51)
    ✔ Código sempre utiliza um espaço após o dois pontos de um nome de propriedade, mas não há espaço entre a propriedade e o dois pontos, por razões de consistência. @done (16-11-27 13:54)
    ✔ Código sempre utiliza um único espaço entre o último seletor e a chave de abertura que inicia a declaração de bloco. @done (16-11-27 13:55)
    ✔ Código sempre começa com uma nova linha para cada seletor e declaração. @done (16-11-27 13:56)
    ✔ Código sempre coloca uma linha em branco (duas quebra de linha) entre as regras. @done (16-11-27 14:03)
    ☐ Código usa aspas duplas para atributos de seletores ou valores de propriedade. Não utilize apas em valores de URI ( url() ). @op

  ESTILO CSS:
    ✔ Código utiliza nomes de classe ou ID que são relevantes ou genéricos e que sejam os menores possíveis, mas tão longo quanto necessário. @done (16-11-27 14:04)
    ✔ Código não utiliza nomes de elemento em conjunção com IDs ou classes @done (16-11-27 14:06)
    ✔ Código utiliza propriedades abreviadas (shorthand) assim que possível. @done (16-11-27 14:14)
    ✔ Código omite a unidade de medida para valores 0. @op @done (16-11-27 14:15)
    ✔ Código inclui 0s à esquerda em valores decimais para legibilidade. @op @done (16-11-27 14:16)
    ✔ Código usa notação hexadecimal de 3 caracteres sempre que possível. @op @done (16-11-27 14:17)
    ✔ Código separa palavras em nomes de classe e ID com um hífen. @op @done (16-11-27 14:17)
    ☐ Código evita detecção de user agent assim como "hacks" de CSS —tente uma abordagem diferente primeiro. @op

  REGRAS GERAIS DE META:
    ✔ Templates e documentos HTML usam a codificação UTF-8 no (BOM), i.e., <meta charset="utf-8"> @done (16-11-27 14:17)
    ☐ Marque todos* itens de ação com TODO @op

